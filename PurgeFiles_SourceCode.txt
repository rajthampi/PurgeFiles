using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Diagnostics;

namespace PurgeFiles
{
    class Program
    {
        static void Main()
        {
            string[] strStartupArguments;
            int nDays;
            string fldrname, fileType;

            fldrname = fileType = string.Empty;
            nDays = 0;


            strStartupArguments = System.Environment.GetCommandLineArgs();

            int i = 0;

            for (i = 0; i < strStartupArguments.Count(); i++)
            {

                if (strStartupArguments[i].ToLower() == "-dfolder")
                {
                    fldrname = strStartupArguments[i + 1];
                }
                else if (strStartupArguments[i].ToLower() == "-ftype")
                {
                    fileType = strStartupArguments[i + 1];
                }
                else if (strStartupArguments[i].ToLower() == "-ndays")
                {
                    nDays = Convert.ToInt32(strStartupArguments[i + 1]);
                }

            }




            if (fldrname == null || fileType == null || nDays == 0)
            {
                Console.WriteLine("No or not all arguments given, USAGE PurgeFiles.exe -dFolder <folder name> -fType <*.extention> -nDays <N> ");
                Console.WriteLine("Example: PurgeFiles.exe -dFolder C:\\myfolder -fType *.txt -nDays 100");
                Console.WriteLine("         C:\\myfolder --is the target folder from files will be deleted");
                Console.WriteLine("         *.txt --tells the system what kind of files should be deleted ");
                Console.WriteLine("         100 --defines file age in number of days");
                Environment.Exit(0);
            }


            string fileName = DateTime.Now.ToString("ddMMyyyy") + ".txt";
            string filePath = System.IO.Path.Combine(fldrname, fileName);

            using (StreamWriter sw = new StreamWriter(filePath))
            {
                sw.WriteLine("File Name;Creation Date;Deletion Date");
                try
                {
                    foreach (System.IO.FileInfo file in new System.IO.DirectoryInfo(fldrname).GetFiles(fileType))
                    {
                        Console.WriteLine(file.Name);
                        if (file.IsReadOnly == false)
                        {
                            if ((DateTime.Now - file.CreationTime).TotalDays > nDays)
                            {

                                sw.WriteLine(file.Name + ";" + file.CreationTime + ";" + DateTime.Now);
                                file.Delete();
                            }
                        }
                        else { Console.WriteLine("File is read protected, cannot delete"); }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Unexpected error occured " + ex.Message);
                }
            }


        }
    }
}
